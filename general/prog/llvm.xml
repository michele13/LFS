<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY llvm-homepage      "http://www.llvm.org/">
  <!ENTITY llvm-wikipedia     "https://en.wikipedia.org/wiki/LLVM">
  <!ENTITY llvm-download-http "http://llvm.org/releases/&llvm-version;/llvm-&llvm-version;.src.tar.gz">
  <!ENTITY llvm-download-ftp  " ">
  <!ENTITY llvm-md5sum        "46ed668a1ce38985120dbf6344cf6116">
  <!ENTITY llvm-size          "16 MB">
  <!ENTITY llvm-buildsize     "1.1 GB">
  <!ENTITY llvm-time          "27 SBU">

  <!ENTITY clang-download-http "http://llvm.org/releases/&llvm-version;/clang-&llvm-version;.src.tar.gz">
  <!ENTITY clang-md5sum        "b378f1e2c424e03289effc75268d3d2c">
  <!ENTITY clang-size          "11 MB">

  <!ENTITY compiler-rt-download-http "http://llvm.org/releases/&llvm-version;/compiler-rt-&llvm-version;.src.tar.gz">
  <!ENTITY compiler-rt-md5sum        "7938353e3a3bda85733a165e7ac4bb84">
  <!ENTITY compiler-rt-size          "1.8 MB">
]>

<sect1 id="llvm" xreflabel="LLVM-&llvm-version;">
  <?dbhtml filename="llvm.html" ?>

  <title>LLVM-&llvm-version;</title>

  <sect2 role="package">
    <title>Introduction</title>

    <para>
      The LLVM package contains a collection of modular and reusable compiler
      and toolchain technologies. The Low Level Virtual Machine (LLVM) Core
      libraries provide a modern source and target-independent optimizer, along
      with code generation support for many popular CPUs (as well as some less
      common ones!). These libraries are built around a well specified code
      representation known as the LLVM intermediate representation ("LLVM IR").
    </para>

    <para>
      The optional Clang and Compiler RT packages provide a new C, C++,
      Objective C and Objective C++ front-ends and runtime libraries for the
      LLVM.
    </para>

    <bridgehead renderas="sect3">Package Information</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Homepage: <ulink url="&llvm-homepage;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Wikipedia: <ulink url="&llvm-wikipedia;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Download (HTTP): <ulink url="&llvm-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Download (FTP): <ulink url="&llvm-download-ftp;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Download MD5 sum: &llvm-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Download size: &llvm-size;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimated disk space required: &llvm-buildsize;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimated build time: &llvm-time;
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Optional Downloads</bridgehead>

    <itemizedlist spacing="compact">
    <title>Clang</title>
      <listitem>
        <para>
          Download: <ulink url="&clang-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Download MD5 sum: &clang-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Download size: &clang-size;
        </para>
      </listitem>
    </itemizedlist>

    <itemizedlist spacing="compact">
    <title>Compiler RT</title>
      <listitem>
        <para>
          Download: <ulink url="&compiler-rt-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Download MD5 sum: &compiler-rt-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Download size: &compiler-rt-size;
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Dependencies</bridgehead>

    <bridgehead renderas="sect4">Recommended</bridgehead>
    <para role="recommended">
      <xref linkend="libffi"/> and
      <xref linkend="python2"/>
    </para>

    <bridgehead renderas="sect4">Optional</bridgehead>
    <para role="optional">
      <xref linkend="doxygen"/>,
      <xref linkend="graphviz"/>,
      <xref linkend="libxml2"/>,
      <xref linkend="zip"/>,
      <ulink url="http://www.ocaml.org/">OCaml</ulink>,
      <ulink url="http://pypi.python.org/pypi/Sphinx">Sphinx</ulink> and
      <ulink url="http://www.valgrind.org/">Valgrind</ulink>
    </para>

  </sect2>

  <sect2>
    <title>Installation</title>

    <para>
      If you have downloaded the optional packages, install them into the source
      tree by running the following commands:
    </para>

<screen><userinput>tar xvf ../clang-&llvm-version;.src.tar.gz -C tools &amp;&amp;
tar xvf ../compiler-rt-&llvm-version;.src.tar.gz -C projects &amp;&amp;
mv -v tools/clang-&llvm-version; tools/clang &amp;&amp;
mv -v projects/compiler-rt-&llvm-version; projects/compiler-rt</userinput></screen>

    <para>
      Install LLVM by running the following commands:
    </para>

<screen><userinput>sed -e 's:\$(PROJ_prefix)/docs/llvm:$(PROJ_prefix)/share/doc/llvm:' \
    -i Makefile.config.in &amp;&amp;
CC=gcc CXX=g++ \
./configure --prefix=/usr \
            --sysconfdir=/etc \
            --enable-libffi \
            --enable-optimized \
            --enable-shared \
            --disable-assertions &amp;&amp;
make</userinput></screen>

    <para>
      Now, as the <systemitem class="username">root</systemitem> user:
    </para>

<screen role="root"><userinput>make install &amp;&amp;
for file in /usr/lib/lib{clang,LLVM,LTO}*.a
do
  test -f $file &amp;&amp; chmod -v 644 $file
done</userinput></screen>

    <para>
      If you had Python installed and you have built Clang, install the Clang
      Analyzer by running the following command as the <systemitem
      class="username">root</systemitem> user:
    </para>

<screen role="root"><userinput>install -v -dm755 /usr/lib/clang-analyzer &amp;&amp;
for prog in scan-build scan-view
do
  cp -rfv tools/clang/tools/$prog /usr/lib/clang-analyzer/
  ln -sfv ../lib/clang-analyzer/$prog/$prog /usr/bin/
done &amp;&amp;
ln -sfv /usr/bin/clang /usr/lib/clang-analyzer/scan-build/ &amp;&amp;
mv -v /usr/lib/clang-analyzer/scan-build/scan-build.1 /usr/share/man/man1/</userinput></screen>

    <sect3>
      <title>Command Explanations</title>

      <para>
        <command>sed -e ...</command>: This sed fixes location of the installed
        documentation.
      </para>

      <para>
        <parameter>--enable-libffi</parameter>: This switch enables LLVM to use
        libffi. Remove if you did not install libffi.
      </para>

      <para>
        <parameter>--enable-optimized</parameter>: This switch enables compiler
        optimizations in order to speed up the code and reduce its size.
      </para>

      <para>
        <parameter>--enable-shared</parameter>: This switch enables building of
        the LLVM shared library which contains all of static libraries linked
        into single library.
      </para>

      <para>
        <parameter>--disable-assertions</parameter>: Disable some compile
        checks, not necessary on a production system.
      </para>

    </sect3>

  </sect2>

  <sect2>
    <title>Contents</title>

    <indexterm zone="llvm">
      <primary sortas="b-bugpoint">bugpoint</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-c-index-test">c-index-test</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-clang">clang</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-clang++">clang++</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-clang-check">clang-check</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-clang-format">clang-format</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-clang-tblgen">clang-tblgen</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-llc">llc</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-lli">lli</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-lli-child-target">lli-child-target</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-llvm-ar">llvm-ar</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-llvm-as">llvm-as</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-llvm-bcanalyzer">llvm-bcanalyzer</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-llvm-config">llvm-config</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-llvm-cov">llvm-cov</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-llvm-diff">llvm-diff</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-llvm-dis">llvm-dis</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-llvm-dis">llvm-dwarfdump</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-llvm-extract">llvm-extract</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-llvm-link">llvm-link</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-llvm-mc">llvm-mc</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-llvm-mcmarkup">llvm-mcmarkup</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-llvm-nm">llvm-nm</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-llvm-objdump">llvm-objdump</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-llvm-ranlib">llvm-ranlib</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-llvm-readobj">llvm-readobj</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-llvm-rtdyld">llvm-rtdyld</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-llvm-size">llvm-size</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-llvm-stress">llvm-stress</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-llvm-symbolizer">llvm-symbolizer</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-llvm-tblgen">llvm-tblgen</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-macho-dump">macho-dump</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-opt">opt</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-scan-build">scan-build</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="b-scan-view">scan-view</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="c-BugpointPasses.so">BugpointPasses.so</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="c-LLVMHello.so">LLVMHello.so</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="c-libLLVM-3.4.so">libLLVM-3.4.so</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="c-libLLVM*.a">libLLVM*.a</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="c-libLTO.a">libLTO.a</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="c-libLTO.so">libLTO.so</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="c-libclang*.a">libclang*.a</primary>
    </indexterm>
    <indexterm zone="llvm">
      <primary sortas="c-libclang.so">libclang.so</primary>
    </indexterm>

    <para>
      Incomplete list of installed files and directories:
    </para>

<screen><literal>/usr/bin/bugpoint
/usr/bin/c-index-test
/usr/bin/clang
/usr/bin/clang++
/usr/bin/clang-check
/usr/bin/clang-format
/usr/bin/clang-tblgen
/usr/bin/llc
/usr/bin/lli
/usr/bin/lli-child-target
/usr/bin/llvm-ar
/usr/bin/llvm-as
/usr/bin/llvm-bcanalyzer
/usr/bin/llvm-config
/usr/bin/llvm-cov
/usr/bin/llvm-diff
/usr/bin/llvm-dis
/usr/bin/llvm-dwarfdump
/usr/bin/llvm-extract
/usr/bin/llvm-link
/usr/bin/llvm-mc
/usr/bin/llvm-mcmarkup
/usr/bin/llvm-nm
/usr/bin/llvm-objdump
/usr/bin/llvm-ranlib
/usr/bin/llvm-readobj
/usr/bin/llvm-rtdyld
/usr/bin/llvm-size
/usr/bin/llvm-stress
/usr/bin/llvm-symbolizer
/usr/bin/llvm-tblgen
/usr/bin/macho-dump
/usr/bin/opt
/usr/bin/scan-build
/usr/bin/scan-view
/usr/include/clang/
/usr/include/clang-c/
/usr/include/llvm/
/usr/include/llvm-c/
/usr/lib/BugpointPasses.so
/usr/lib/LLVMHello.so
/usr/lib/clang/
/usr/lib/clang-analyzer/
/usr/lib/libLLVM-3.4.so
/usr/lib/libLLVM*.a
/usr/lib/libLTO.a
/usr/lib/libLTO.so
/usr/lib/libclang*.a
/usr/lib/libclang.so
/usr/share/doc/llvm/
/usr/share/man/man1/clang.1
/usr/share/man/man1/scan-build.1</literal></screen>

  </sect2>

</sect1>
