<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY glibc-homepage      "http://www.gnu.org/software/libc/">
  <!ENTITY glibc-wikipedia     "https://en.wikipedia.org/wiki/GNU_C_Library">
  <!ENTITY glibc-download-http "http://ftp.gnu.org/gnu/glibc/glibc-&glibc-version;.tar.xz">
  <!ENTITY glibc-download-ftp  "ftp://ftp.gnu.org/gnu/glibc/glibc-&glibc-version;.tar.xz">
  <!ENTITY glibc-md5sum        "97dc5517f92016f3d70d83e3162ad318">
  <!ENTITY glibc-size          "13 MB">
  <!ENTITY glibc-buildsize     "983 MB">
  <!ENTITY glibc-time          "19 SBU">
]>

<sect1 id="glibc" xreflabel="glibc-&glibc-version;">
  <?dbhtml filename="glibc.html"?>

  <title>glibc-&glibc-version;</title>

  <sect2 role="package">
    <title>Introduction</title>

    <para>
      The Glibc package contains the main C library. This library provides the
      basic routines for allocating memory, searching directories, opening and
      closing files, reading and writing files, string handling, pattern
      matching, arithmetic, and so on.
    </para>

    <bridgehead renderas="sect3">Package Information</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Homepage: <ulink url="&glibc-homepage;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Wikipedia: <ulink url="&glibc-wikipedia;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Download (HTTP): <ulink url="&glibc-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Download (FTP): <ulink url="&glibc-download-ftp;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Download MD5 sum: &glibc-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Download size: &glibc-size;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimated disk space required: &glibc-buildsize;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimated build time: &glibc-time;
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Additional Downloads</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Recommended patch:
          <ulink url="&patch-root;glibc/glibc-&glibc-version;-paths-1.patch"/>
        </para>
      </listitem>
    </itemizedlist>

  </sect2>

  <sect2>
    <title>Installation</title>

    <para>
      Some of the Glibc programs use non-FHS compilant /var/db directory to
      store their runtime data. Apply the following patch to make such programs
      store their runtime data in the FHS-compliant locations:
    </para>

<screen><userinput>patch -p1 -i ../glibc-&glibc-version;-paths-1.patch</userinput></screen>

    <para>
      The Glibc build system is self-contained and will install perfectly, even
      though the compiler specs file and linker are still pointing at /tools.
      The specs and linker cannot be adjusted before the Glibc install because
      the Glibc autoconf tests would give false results and defeat the goal of
      achieving a clean build.
    </para>

    <para>
      The Glibc documentation recommends building Glibc outside of the source
      directory in a dedicated build directory:
    </para>

<screen><userinput>mkdir -v ../glibc-build
cd ../glibc-build</userinput></screen>

    <para>
      Prepare the package:
    </para>

<screen><userinput>../glibc-&glibc-version;/configure --prefix= \
                        --disable-profile \
                        --disable-build-nscd \
                        --disable-nscd \
                        --enable-kernel=&glibc-min-kernel; \
                        --enable-obsolete-rpc</userinput></screen>

    <para>
      Build the package:
    </para>

<screen><userinput>make</userinput></screen>

    <para>
      Install the package:
    </para>

<screen role="root"><userinput>porg -lp glibc-&glibc-version; -E $PWD "make -j1 install"
ls /etc/ld.so.cache /lib/ld-linux-x86-64.so.2 | porg -lp+ glibc-&glibc-version;
for lib in BrokenLocale anl c cidn crypt dl m mvec nsl nss_* pthread resolv \
    rt thread_db util ; do ls /lib/lib${lib}.so.? | porg -lp+ glibc-&glibc-version; ; done</userinput></screen>
<!--
    <para>
      Install the configuration file and runtime directory for nscd:
    </para>

<screen role="root"><userinput>porg -lp+ glibc-&glibc-version; "cp -v ../glibc-&glibc-version;/nscd/nscd.conf /etc/nscd.conf"
mkdir -pv /var/cache/nscd</userinput></screen>
-->
    <para>
      The locales that can make the system respond in a different language are
      not required and were not installed by the above commands. Individual
      locales can be installed using the localedef program. E.g., the localedef
      command below combines the /share/i18n/locales/en_US charset-independent
      locale definition with the /share/i18n/charmaps/UTF-8.gz charmap
      definition and appends the result to the /lib/locale/locale-archive file:
    </para>

<screen role="root"><userinput>mkdir -pv /lib/locale
porg -lp+ glibc-&glibc-version; "localedef -i en_US -f UTF-8 en_US.UTF-8"</userinput></screen>

  </sect2>

  <sect2>
    <title>Configuration</title>

    <para>
      The /etc/nsswitch.conf file needs to be created because the Glibc
      defaults do not work well in a networked environment. Create a new file
      /etc/nsswitch.conf by running the following:
    </para>

<screen role="root"><userinput>cat > /etc/nsswitch.conf &lt;&lt; "EOF"
<literal>passwd: files
group: files
shadow: files

hosts: files dns
networks: files

protocols: files
services: files
ethers: files
rpc: files</literal>
EOF
ls /etc/nsswitch.conf | porg -lp+ glibc-&glibc-version;</userinput></screen>

    <para>
      Now that the final C libraries have been installed, it is time to adjust
      the toolchain so that it will link any newly compiled program against
      these new libraries. First, backup the /tools linker, and replace it with
      the adjusted linker we made in the temporary system. We'll also create a
      link to its counterpart in /tools/$(uname -m)-pc-linux-gnu/bin:
    </para>

<screen role="root"><userinput>mv -v /tools/bin/ld /tools/bin/ld-old
mv -v /tools/x86_64-pc-linux-gnu/bin/ld /tools/x86_64-pc-linux-gnu/bin/ld-old
mv -v /tools/bin/ld-new /tools/bin/ld
ln -sv /tools/bin/ld /tools/$(uname -m)-pc-linux-gnu/bin/ld</userinput></screen>

    <para>
      Next, amend the GCC specs file so that it points to the new dynamic
      linker. Simply deleting all instances of “/tools” should leave us with
      the correct path to the dynamic linker. Also adjust the specs file so
      that GCC knows where to find the correct headers and Glibc start files. A
      sed command accomplishes this:
    </para>

<screen role="root"><userinput>gcc -dumpspecs | sed -e 's@/tools@@g' \
                     -e '/\*startfile_prefix_spec:/{n;s@.*@/lib/ @}' \
                     -e '/\*cpp:/{n;s@$@ -isystem /include@}' > \
                     `dirname $(gcc --print-libgcc-file-name)`/specs</userinput></screen>

    <para>
      It is a good idea to visually inspect the specs file to verify the
      intended change was actually made.
    </para>

    <para>
      It is imperative at this point to ensure that the basic functions
      (compiling and linking) of the adjusted toolchain are working as
      expected. To do this, perform the following sanity checks:
    </para>

<screen role="root"><userinput>echo 'int main(){}' > dummy.c
cc dummy.c -v -Wl,--verbose &amp;> dummy.log
readelf -l a.out | grep ': /lib'</userinput></screen>

    <para>
      There should be no errors, and the output of the last command will be
      (allowing for platform-specific differences in dynamic linker name):
    </para>

<screen><computeroutput>[Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]</computeroutput></screen>

    <para>
      Note that /lib is now the prefix of our dynamic linker.
    </para>

    <para>
      Now make sure that we're setup to use the correct startfiles:
    </para>

<screen role="root"><userinput>grep -o '/lib.*/crt[1in].*succeeded' dummy.log</userinput></screen>

    <para>
      The output of the last command should be:
    </para>

<screen><computeroutput>/lib/../lib64/crt1.o succeeded
/lib/../lib64/crti.o succeeded
/lib/../lib64/crtn.o succeeded</computeroutput></screen>

    <para>
      Verify that the compiler is searching for the correct header files:
    </para>

<screen role="root"><userinput>grep -B1 '^ /include' dummy.log</userinput></screen>

    <para>
      This command should return the following output:
    </para>

<screen><computeroutput>#include &lt;...> search starts here:
 /include</computeroutput></screen>

    <para>
      Next, verify that the new linker is being used with the correct search
      paths:
    </para>

<screen role="root"><userinput>grep 'SEARCH.*/lib' dummy.log |sed 's|; |\n|g'</userinput></screen>

    <para>
      References to paths that have components with '-linux-gnu' should be
      ignored, but otherwise the output of the last command should be:
    </para>

<screen><computeroutput>SEARCH_DIR("/lib");</computeroutput></screen>

    <para>
      Next make sure that we're using the correct libc:
    </para>

<screen role="root"><userinput>grep "/lib.*/libc.so.6 " dummy.log</userinput></screen>

    <para>
      The output of the last command should be:
    </para>

<screen><computeroutput>attempt to open /lib/libc.so.6 succeeded</computeroutput></screen>

    <para>
      Lastly, make sure GCC is using the correct dynamic linker:
    </para>

<screen role="root"><userinput>grep found dummy.log</userinput></screen>

    <para>
      The output of the last command should be:
    </para>

<screen><computeroutput>found ld-linux-x86-64.so.2 at /lib/ld-linux-x86-64.so.2</computeroutput></screen>

    <para>
      If the output does not appear as shown above or is not received at all,
      then something is seriously wrong. Investigate and retrace the steps to
      find out where the problem is and correct it. The most likely reason is
      that something went wrong with the specs file adjustment. Any issues will
      need to be resolved before continuing on with the process.
    </para>

    <para>
      Once everything is working correctly, clean up the test files:
    </para>

<screen role="root"><userinput>rm -v dummy.c a.out dummy.log</userinput></screen>

  </sect2>

</sect1>
