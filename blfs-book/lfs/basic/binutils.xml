<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY binutils-homepage      "https://www.gnu.org/software/binutils/">
  <!ENTITY binutils-wikipedia     "https://en.wikipedia.org/wiki/GNU_Binutils">
  <!ENTITY binutils-download-http "http://ftp.gnu.org/gnu/binutils/binutils-&binutils-version;.tar.bz2">
  <!ENTITY binutils-download-ftp  "ftp://ftp.gnu.org/gnu/binutils/binutils-&binutils-version;.tar.bz2">
  <!ENTITY binutils-size          "25 MB">
  <!ENTITY binutils-buildsize     "445 MB">
  <!ENTITY binutils-time          "1.0 SBU">
]>

<sect1 id="binutils" xreflabel="binutils-&binutils-version;">
  <?dbhtml filename="binutils.html"?>

  <title>binutils-&binutils-version;</title>

  <sect2 role="package">
    <title>Introduction</title>

    <para>
      The Glibc package contains the main C library. This library provides the
      basic routines for allocating memory, searching directories, opening and
      closing files, reading and writing files, string handling, pattern
      matching, arithmetic, and so on.
    </para>

    <bridgehead renderas="sect3">Package Information</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Homepage: <ulink url="&binutils-homepage;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Wikipedia: <ulink url="&binutils-wikipedia;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Download (HTTP): <ulink url="&binutils-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Download (FTP): <ulink url="&binutils-download-ftp;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Download MD5 sum: &binutils-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Download size: &binutils-size;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimated disk space required: &binutils-buildsize;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimated build time: &binutils-time;
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Dependencies</bridgehead>

    <bridgehead renderas="sect4">Recommended</bridgehead>
    <para>
      <xref linkend="libz"/>
    </para>

  </sect2>

  <sect2>
    <title>Installation</title>

    <para>
      Suppress installation of unnecessary files:
    </para>

<screen><userinput>for dir in binutils/doc bfd/doc gas/doc gprof ld ; do
    sed "s/ install-info-am//" -i $dir/Makefile.in
done</userinput></screen>

    <para>
      Fix missing makeinfo requirement:
    </para>

<screen><userinput>sed 's,MAKEINFO="$MISSING makeinfo",MAKEINFO=true,g' -i configure</userinput></screen>

    <para>
      The Binutils documentation recommends building Binutils outside of the
      source directory in a dedicated build directory:
    </para>

<screen><userinput>mkdir -v ../binutils-build
cd ../binutils-build</userinput></screen>

    <para>
      Prepare the package:
    </para>

<screen><userinput>../binutils-&binutils-version;/configure --prefix= \
                           --disable-static \
                           --disable-nls \
                           --enable-shared \
                           --with-system-zlib</userinput></screen>

    <para>
      Build the package:
    </para>

<screen><userinput>make tooldir=</userinput></screen>

    <para>
      Install the package:
    </para>

<screen><userinput>porg -lp binutils-&binutils-version; -E $PWD "make tooldir= -j1 install &amp;&amp;
rm -v /lib/libbfd.la &amp;&amp;
rm -v /lib/libopcodes.la"</userinput></screen>

    <sect3>
      <title>Explanation</title>

      <para>
        <parameter>tooldir=</parameter>: Normally, the tooldir (the directory
        where the executables will ultimately be located) is set to
        $(exec_prefix)/$(target_alias). For example, x86_64 machines would
        expand that to /x86_64-unknown-linux-gnu. Because this is a custom
        system, this target-specific directory in / is not required.
        $(exec_prefix)/$(target_alias) would be used if the system was used to
        cross-compile (for example, compiling a package on an Intel machine
        that generates code that can be executed on PowerPC machines). 
      </para>

    </sect3>


  </sect2>

</sect1>
