<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;
]>

<sect1 id="linux-image" xreflabel="linux-image-&linux-version;">
  <?dbhtml filename="linux-image.html"?>

  <title>linux-image-&linux-version;</title>

  <sect2 role="package">
    <title>Package Information</title>

    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Homepage: <ulink url="&linux-homepage;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Wikipedia: <ulink url="&linux-wikipedia;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Download: <ulink url="&linux-download;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          MD5 sum: &linux-md5sum;
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Additional Downloads</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Recommended patch:
          <ulink url="&patch-root;linux/linux-&linux-version;-nobc_timeconst-1.patch"/>
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Dependencies</bridgehead>

    <bridgehead renderas="sect4">Optional</bridgehead>
    <para>
      <xref linkend="bc"/>,
      <xref linkend="ncurses"/>,
      <xref linkend="perl"/>
    </para>

  </sect2>

  <sect2>
    <title>Installation</title>

    <para>
      Building the kernel involves a few steps - configuration, compilation,
      and installation. Read the README file in the kernel source tree for
      alternative methods to the way this book configures the kernel.
    </para>

    <para>
      First, apply a patch which removes dependency on the bc package:
    </para>

<screen><userinput>patch -Np1 -i ../linux-&linux-version;-nobc_timeconst-1.patch</userinput></screen>

    <!-- Support for compiling a keymap into the kernel is deliberately removed -->

    <para>
      A good starting place for setting up the kernel configuration is to run
      make defconfig. This will set the base configuration to a good state that
      takes your current system architecture into account.
    </para>

<screen><userinput>make defconfig</userinput></screen>

    <para>
      Alternatively, make oldconfig may be more appropriate in some situations.
      See the README file for more information.
    </para>

    <para>
      If desired, skip kernel configuration by copying the kernel config file,
      .config, from the host system (assuming it is available) to the unpacked
      linux-&linux-version; directory. However, we do not recommend this
      option. It is often better to explore all the configuration menus and
      create the kernel configuration from scratch.
    </para>

    <para>
      Disable a default option which requires Perl:
    </para>

<screen><userinput>sed 's/\(CONFIG_NFS_V4\)=y/# \1 is not set/' -i .config</userinput></screen>

<!--
    <para>Enable some common network device drivers:</para>

<screen><userinput>sed 's/# \(CONFIG_E1000E\) is not set/\1=m/' -i .config</userinput></screen>
-->

    <!-- Remove at 4.8.13 -->
    <para>
      Fix an out of memory issue that affects recent kernels:
    </para>

<screen><userinput>sed -e '/sk_sndbuf/s/u32/int/' \
    -e '/sk_rcvbuf/s/u32/int/' \
    -i net/core/sock.c</userinput></screen>

    <para>
      Build the kernel image and modules:</para>

<screen><userinput>make</userinput></screen>

    <para>
      Install the modules:
    </para>

<screen><userinput>porg -lp linux-image-&linux-version; "make -j1 modules_install"</userinput></screen>

    <para>
      After kernel compilation is complete, additional steps are required to
      complete the installation. Some files need to be copied to the /boot
      directory.
    </para>

    <para>
      The path to the kernel image may vary depending on the platform being
      used. The filename below can be changed to suit your taste, but the stem
      of the filename should be vmlinuz to be compatible with the automatic
      setup of the boot process described in the next section. The following
      command assumes an x86 architecture:
    </para>

<screen><userinput>porg -lp+ linux-image-&linux-version; "cp -v arch/x86/boot/bzImage /boot/vmlinuz-&linux-version;"</userinput></screen>

    <para>
      System.map is a symbol file for the kernel. It maps the function entry
      points of every function in the kernel API, as well as the addresses of
      the kernel data structures for the running kernel. It is used as a
      resource when investigating kernel problems. Issue the following command
      to install the map file:
    </para>

<screen><userinput>porg -lp+ linux-image-&linux-version; "cp -v System.map /boot/System.map-&linux-version;"</userinput></screen>

    <para>
      The kernel configuration file .config contains all the configuration
      selections for the kernel that was just compiled. It is a good idea to
      keep this file for future reference:
    </para>

<screen><userinput>porg -lp+ linux-image-&linux-version; "cp -v .config /boot/config-&linux-version;"</userinput></screen>

    <warning>
      <para>
        The headers in the system's include directory (/include) should always
        be the ones against which Glibc was compiled, that is, the sanitised
        headers installed in <xref linkend="linux-headers"/>.  Therefore, they
        should never be replaced by either the raw kernel headers or any other
        kernel sanitized headers.
      </para>
    </warning>

  </sect2>
<!--
  <sect2>
    <title>Configuring Linux Module Load Order</title>

    <para>
      Most of the time Linux modules are loaded automatically, but sometimes it
      needs some specific direction. The program that loads modules, modprobe
      or insmod, uses /etc/modprobe.d/usb.conf for this purpose. This file
      needs to be created so that if the USB drivers (ehci_hcd, ohci_hcd and
      uhci_hcd) have been built as modules, they will be loaded in the correct
      order; ehci_hcd needs to be loaded prior to ohci_hcd and uhci_hcd in
      order to avoid a warning being output at boot time.
    </para>

    <para>
      Create a new file /etc/modprobe.d/usb.conf by running the following:
    </para>

<screen><userinput>install -v -m755 -d /etc/modprobe.d
cat &gt; /etc/modprobe.d/usb.conf &lt;&lt; "EOF"
<literal># Begin /etc/modprobe.d/usb.conf

install ohci_hcd /bin/modprobe ehci_hcd ; /bin/modprobe -i ohci_hcd ; true
install uhci_hcd /bin/modprobe ehci_hcd ; /bin/modprobe -i uhci_hcd ; true

# End /etc/modprobe.d/usb.conf</literal>
EOF</userinput></screen>

  </sect2>
-->
</sect1>
