<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY gcc-homepage      "http://gcc.gnu.org/">
  <!ENTITY gcc-wikipedia     "https://en.wikipedia.org/wiki/GNU_Compiler_Collection">
  <!ENTITY gcc-download-http "http://ftp.gnu.org/gnu/gcc/gcc-&gcc-version;/gcc-&gcc-version;.tar.bz2">
  <!ENTITY gcc-download-ftp  "ftp://ftp.gnu.org/gnu/gcc/gcc-&gcc-version;/gcc-&gcc-version;.tar.bz2">
  <!ENTITY gcc-size          "95 MB">
  <!ENTITY gcc-buildsize     "2.8 GB">
  <!ENTITY gcc-time          "7.0 SBU">

  <!ENTITY mpfr-download-http "http://www.mpfr.org/mpfr-&mpfr-version;/mpfr-&mpfr-version;.tar.xz">

  <!ENTITY gmp-download-http "http://ftp.gnu.org/gnu/gmp/gmp-&gmp-version;.tar.xz">

  <!ENTITY mpc-download-http "http://www.multiprecision.org/mpc/download/mpc-&mpc-version;.tar.gz">
]>

<sect1 id="temp-gcc-pass2" xreflabel="gcc-&gcc-version; - pass 2">
  <?dbhtml filename="temp-gcc-pass2.html"?>

  <title>gcc-&gcc-version; - pass 2</title>

  <sect2 role="package">
    <title>Introduction</title>

    <para>
      The GCC package contains the GNU compiler collection, which includes the
      C and C++ compilers.
    </para>

    <bridgehead renderas="sect3">Package Information</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Homepage: <ulink url="&gcc-homepage;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Wikipedia: <ulink url="&gcc-wikipedia;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Download (HTTP): <ulink url="&gcc-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Download (FTP): <ulink url="&gcc-download-ftp;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Download MD5 sum: &gcc-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Download size: &gcc-size;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimated disk space required: &gcc-buildsize;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimated build time: &gcc-time;
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Additional Downloads</bridgehead>

      <bridgehead renderas="sect4">mpfr</bridgehead>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            Download: <ulink url="&mpfr-download-http;"/>
          </para>
        </listitem>
        <listitem>
          <para>
            Download MD5 sum: &mpfr-md5sum;
          </para>
        </listitem>
      </itemizedlist>

      <bridgehead renderas="sect4">gmp</bridgehead>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            Download: <ulink url="&gmp-download-http;"/>
          </para>
        </listitem>
        <listitem>
          <para>
            Download MD5 sum: &gmp-md5sum;
          </para>
        </listitem>
      </itemizedlist>

      <bridgehead renderas="sect4">mpc</bridgehead>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            Download: <ulink url="&mpc-download-http;"/>
          </para>
        </listitem>
        <listitem>
          <para>
            Download MD5 sum: &mpc-md5sum;
          </para>
        </listitem>
      </itemizedlist>

  </sect2>

  <sect2>
    <title>Installation</title>

    <para>
      Our first build of GCC has installed a couple of internal system headers.
      Normally one of them, limits.h will in turn include the corresponding
      system limits.h header, in this case, /tools/include/limits.h. However,
      at the time of the first build of gcc /tools/include/limits.h did not
      exist, so the internal header that GCC installed is a partial,
      self-contained file and does not include the extended features of the
      system header. This was adequate for building the temporary libc, but
      this build of GCC now requires the full internal header. Create a full
      version of the internal header using a command that is identical to what
      the GCC build system does in normal circumstances:
    </para>

<screen><userinput>cat gcc/limitx.h gcc/glimits.h gcc/limity.h > \
  `dirname $($LFS_TGT-gcc -print-libgcc-file-name)`/include-fixed/limits.h</userinput></screen>

    <para>
      Once again, change the location of GCC's default dynamic linker to use
      the one installed in /tools.
    </para>

<screen><userinput>for file in \
 $(find gcc/config -name linux64.h -o -name linux.h -o -name sysv4.h)
do
  cp -v $file $file.orig
  sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&amp;@g' \
      -e 's@/usr@/tools@g' $file.orig > $file
  echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
  touch $file.orig
done</userinput></screen>

    <para>
      As in the first build of GCC it requires the GMP, MPFR and MPC packages.
      Unpack the tarballs and move them into the required directory names:
    </para>

<screen><userinput>tar xf ../mpfr-&mpfr-version;.tar.xz
mv -v mpfr-&mpfr-version; mpfr
tar xf ../gmp-&gmp-version;.tar.xz
mv -v gmp-&gmp-version; gmp
tar xf ../mpc-&mpc-version;.tar.gz
mv -v mpc-&mpc-version; mpc</userinput></screen>

    <para>
      The GCC documentation recommends building GCC outside of the source
      directory in a dedicated build directory:
    </para>

<screen><userinput>mkdir -v ../gcc-build
cd ../gcc-build</userinput></screen>

    <para>
      Prepare the package:
    </para>

<screen><userinput>CC=$LFS_TGT-gcc \
CXX=$LFS_TGT-g++ \
AR=$LFS_TGT-ar \
RANLIB=$LFS_TGT-ranlib \
../gcc-&gcc-version;/configure --prefix=/tools \
                       --with-local-prefix=/tools \
                       --with-native-system-header-dir=/tools/include \
                       --enable-languages=c,c++ \
                       --disable-libstdcxx-pch \
                       --disable-multilib \
                       --disable-bootstrap \
                       --disable-libgomp</userinput></screen>

    <para>
      Build the package:
    </para>

<screen><userinput>make</userinput></screen>

    <para>
      Install the package:
    </para>

<screen><userinput>make -j1 install</userinput></screen>

    <para>
      As a finishing touch, create a symlink. Many programs and scripts run cc
      instead of gcc, which is used to keep programs generic and therefore
      usable on all kinds of UNIX systems where the GNU C compiler is not
      always installed. Running cc leaves the system administrator free to
      decide which C compiler to install:
    </para>

<screen><userinput>ln -sv gcc /tools/bin/cc</userinput></screen>

    <para>
      At this point, it is imperative to stop and ensure that the basic
      functions (compiling and linking) of the new toolchain are working as
      expected. To perform a sanity check, run the following commands:
    </para>

<screen><userinput>echo 'int main(){}' > dummy.c
cc dummy.c
readelf -l a.out | grep ': /tools'</userinput></screen>

    <para>
      If everything is working correctly, there should be no errors, and the
      output of the last command will be of the form:
    </para>

<screen><computeroutput>[Requesting program interpreter: /tools/lib64/ld-linux-x86-64.so.2]</computeroutput></screen>

    <para>
      Note that /tools/lib64 appears as the prefix of the dynamic linker.
    </para>

    <para>
      If the output is not shown as above or there was no output at all, then
      something is wrong. Investigate and retrace the steps to find out where
      the problem is and correct it. This issue must be resolved before
      continuing on. First, perform the sanity check again, using gcc instead
      of cc. If this works, then the /tools/bin/cc symlink is missing. Install
      the symlink as per above. Next, ensure that the PATH is correct. This can
      be checked by running echo $PATH and verifying that /tools/bin is at the
      head of the list. If the PATH is wrong it could mean that something went
      wrong back in setting up the environment.
    </para>

    <para>
      Once all is well, clean up the test files:
    </para>

<screen><userinput>rm -v dummy.c a.out</userinput></screen>

    <sect3>
      <title>Explanation</title>

      <para>
        <parameter>--disable-libstdcxx-pch</parameter>: Do not build the
        pre-compiled header (PCH) for libstdc++. It takes up a lot of space,
        and we have no use for it.
      </para>

      <para>
        <parameter>--disable-bootstrap</parameter>: For native builds of GCC,
        the default is to do a "bootstrap" build. This does not just compile
        GCC, but compiles it several times. It uses the programs compiled in a
        first round to compile itself a second time, and then again a third
        time. The second and third iterations are compared to make sure it can
        reproduce itself flawlessly. This also implies that it was compiled
        correctly. However, the LFS build method should provide a solid
        compiler without the need to bootstrap each time.
      </para>

    </sect3>

  </sect2>

</sect1>
