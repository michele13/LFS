<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY gcc-homepage      "http://gcc.gnu.org/">
  <!ENTITY gcc-wikipedia     "https://en.wikipedia.org/wiki/GNU_Compiler_Collection">
  <!ENTITY gcc-download-http "http://ftp.gnu.org/gnu/gcc/gcc-&gcc-version;/gcc-&gcc-version;.tar.bz2">
  <!ENTITY gcc-download-ftp  "ftp://ftp.gnu.org/gnu/gcc/gcc-&gcc-version;/gcc-&gcc-version;.tar.bz2">
  <!ENTITY gcc-md5sum        "9768625159663b300ae4de2f4745fcc4">
  <!ENTITY gcc-size          "95 MB">
  <!ENTITY gcc-buildsize     "2.8 GB">
  <!ENTITY gcc-time          "7.0 SBU">

  <!ENTITY mpfr-download-http "http://www.mpfr.org/mpfr-&mpfr-version;/mpfr-&mpfr-version;.tar.xz">
  <!ENTITY mpfr-md5sum        "c4ac246cf9795a4491e7766002cd528f">

  <!ENTITY gmp-download-http "http://ftp.gnu.org/gnu/gmp/gmp-&gmp-version;.tar.xz">
  <!ENTITY gmp-md5sum        "e70e183609244a332d80529e7e155a35">

  <!ENTITY mpc-download-http "http://www.multiprecision.org/mpc/download/mpc-&mpc-version;.tar.gz">
  <!ENTITY mpc-md5sum        "d6a1d5f8ddea3abd2cc3e98f58352d26">
]>

<sect1 id="temp-gcc-pass1" xreflabel="gcc-&gcc-version; - pass 1">
  <?dbhtml filename="temp-gcc-pass1.html"?>

  <title>gcc-&gcc-version; - pass 1</title>

  <sect2 role="package">
    <title>Introduction</title>

    <para>
      The GCC package contains the GNU compiler collection, which includes the
      C and C++ compilers.
    </para>

    <bridgehead renderas="sect3">Package Information</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Homepage: <ulink url="&gcc-homepage;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Wikipedia: <ulink url="&gcc-wikipedia;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Download (HTTP): <ulink url="&gcc-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Download (FTP): <ulink url="&gcc-download-ftp;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Download MD5 sum: &gcc-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Download size: &gcc-size;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimated disk space required: &gcc-buildsize;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimated build time: &gcc-time;
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Additional Downloads</bridgehead>

      <bridgehead renderas="sect4">mpfr</bridgehead>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            Download: <ulink url="&mpfr-download-http;"/>
          </para>
        </listitem>
        <listitem>
          <para>
            Download MD5 sum: &mpfr-md5sum;
          </para>
        </listitem>
      </itemizedlist>

      <bridgehead renderas="sect4">gmp</bridgehead>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            Download: <ulink url="&gmp-download-http;"/>
          </para>
        </listitem>
        <listitem>
          <para>
            Download MD5 sum: &gmp-md5sum;
          </para>
        </listitem>
      </itemizedlist>

      <bridgehead renderas="sect4">mpc</bridgehead>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            Download: <ulink url="&mpc-download-http;"/>
          </para>
        </listitem>
        <listitem>
          <para>
            Download MD5 sum: &mpc-md5sum;
          </para>
        </listitem>
      </itemizedlist>

  </sect2>

  <sect2>
    <title>Installation</title>

    <para>
      The following command will change the location of GCC's default dynamic
      linker to use the one installed in /tools. It also removes /usr/include
      from GCC's include search path. Issue:
    </para>

<screen><userinput>for file in \
 $(find gcc/config -name linux64.h -o -name linux.h -o -name sysv4.h)
do
  cp -v $file $file.orig
  sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&amp;@g' \
      -e 's@/usr@/tools@g' $file.orig > $file
  echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
  touch $file.orig
done</userinput></screen>

    <para>
      In case the above seems hard to follow, let's break it down a bit. First
      we find all the files under the gcc/config directory that are named
      either linux.h, linux64.h or sysv4.h. For each file found, we copy it to
      a file of the same name but with an added suffix of “.orig”. Then the
      first sed expression prepends “/tools” to every instance of “/lib/ld”,
      “/lib64/ld” or “/lib32/ld”, while the second one replaces hard-coded
      instances of “/usr”. Next, we add our define statements which alter the
      default startfile prefix to the end of the file. Note that the trailing
      “/” in “/tools/lib/” is required. Finally, we use touch to update the
      timestamp on the copied files.
    </para>

    <para>
      GCC now requires the GMP, MPFR and MPC packages. Unpack each package into
      the GCC source directory and rename the resulting directories so the GCC
      build procedures will automatically use them:
    </para>

<screen><userinput>tar xf ../mpfr-&mpfr-version;.tar.xz
mv -v mpfr-&mpfr-version; mpfr
tar xf ../gmp-&gmp-version;.tar.xz
mv -v gmp-&gmp-version; gmp
tar xf ../mpc-&mpc-version;.tar.gz
mv -v mpc-&mpc-version; mpc</userinput></screen>

    <para>
      The GCC documentation recommends building GCC outside of the source
      directory in a dedicated build directory:
    </para>

<screen><userinput>mkdir -v ../gcc-build
cd ../gcc-build</userinput></screen>

    <para>
      Prepare the package:
    </para>

<screen><userinput>../gcc-&gcc-version;/configure --prefix=/tools \
                       --target=$LFS_TGT \
                       --with-glibc-version=2.11 \
                       --with-sysroot=$LFS \
                       --with-newlib \
                       --without-headers \
                       --with-local-prefix=/tools \
                       --with-native-system-header-dir=/tools/include \
                       --disable-shared \
                       --disable-multilib \
                       --disable-decimal-float \
                       --disable-threads \
                       --disable-libatomic \
                       --disable-libgomp \
                       --disable-libmpx \
                       --disable-libquadmath \
                       --disable-libssp \
                       --disable-libvtv \
                       --disable-libstdcxx \
                       --enable-languages=c,c++</userinput></screen>

    <variablelist>
      <title>Explanation</title>

      <varlistentry>
        <term><parameter>--with-newlib</parameter></term>
        <listitem>
          <para>
            Since a working C library is not yet available, this ensures that
            the inhibit_libc constant is defined when building libgcc. This
            prevents the compiling of any code that requires libc support.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--without-headers</parameter></term>
        <listitem>
          <para>
            When creating a complete cross-compiler, GCC requires standard
            headers compatible with the target system. For our purposes these
            headers will not be needed. This switch prevents GCC from looking
            for them.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--with-local-prefix=/tools</parameter></term>
        <listitem>
          <para>
            The local prefix is the location in the system that GCC will search
            for locally installed include files. The default is /usr/local.
            Setting this to /tools helps keep the host location of /usr/local
            out of this GCC's search path.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--with-native-system-header-dir=/tools/include</parameter></term>
        <listitem>
          <para>
            By default GCC searches /usr/include for system headers. In
            conjunction with the sysroot switch, this would translate normally
            to $LFS/usr/include. However the headers that will be installed in
            the next two sections will go to $LFS/tools/include. This switch
            ensures that gcc will find them correctly. In the second pass of
            GCC, this same switch will ensure that no headers from the host
            system are found.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--disable-shared</parameter></term>
        <listitem>
          <para>
            This switch forces GCC to link its internal libraries statically.
            We do this to avoid possible issues with the host system.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <parameter>--disable-decimal-float</parameter>,
          <parameter>--disable-threads</parameter>,
          <parameter>--disable-libatomic</parameter>,
          <parameter>--disable-libgomp</parameter>,
          <parameter>--disable-libmpx</parameter>,
          <parameter>--disable-libquadmath</parameter>,
          <parameter>--disable-libssp</parameter>,
          <parameter>--disable-libvtv</parameter>,
          <parameter>--disable-libstdcxx</parameter>
        </term>
        <listitem>
          <para>
            These switches disable support for the decimal floating point
            extension, threading, libatomic, libgomp, libmpx, libquadmath,
            libssp, libvtv, and the C++ standard library respectively. These
            features will fail to compile when building a cross-compiler and
            are not necessary for the task of cross-compiling the temporary
            libc.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--disable-multilib</parameter></term>
        <listitem>
          <para>
            On x86_64, LFS does not yet support a multilib configuration. This
            switch is harmless for x86.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--enable-languages=c,c++</parameter></term>
        <listitem>
          <para>
            This option ensures that only the C and C++ compilers are built.
            These are the only languages needed now.
          </para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>
      Build the package:
    </para>

<screen><userinput>make</userinput></screen>

    <para>
      Install the package:
    </para>

<screen><userinput>make -j1 install</userinput></screen>

  </sect2>

</sect1>
